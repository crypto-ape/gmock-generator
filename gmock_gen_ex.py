import os
import sys
from cpp import gmock_class
from cStringIO import StringIO

header_template = \
"""
/**
AUTOGENERATED FILE - MODIFY ON YOUR OWN RESPONSIBILITY!
This file has been generated using gmock_gen utility.
**/

#pragma once

#include <gmock/gmock.h>
#include "%s"

"""


def build_include_header(rel_dir, include_path):
    if rel_dir:
        path = rel_dir + "/" + include_path
        return header_template % (path)
    else:
        return header_template % (include_path)


if __name__ == '__main__':

    args = sys.argv

    input_path = args[1]
    output_path = args[2]

    # TODO: filter unwanted directories
    # TODO: keep directory structure on output
    for r, d, f in os.walk(input_path):
        for filename in f:
            input_filepath = os.path.join(r, filename)
            output_filepath = os.path.join(output_path, "mock_" + filename)

            print("Processing file: %s" % input_filepath)

            stdout = sys.stdout
            sys.stdout = output = StringIO()

            try:
                gmock_class.main(["../gmock_class", input_filepath])
            except:
                # TODO: write failed path to some output file
                # 'No class found in' is good exception...other might not be...
                pass

            str_out = output.getvalue()

            if len(str_out) > 0:
                relative_dir = r[len(input_path):]
                includes = build_include_header(relative_dir, filename)

                f = open(output_filepath, 'w')
                f.write(includes)
                f.write(str_out)
                f.close()

            sys.stdout = stdout
